name: "üß© Zookeeper Infrastructure ‚Äì CI/CD"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 1

      - name: Validate Azure identifiers (secrets)
        env:
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          AZURE_KEYVAULT_NAME: ${{ secrets.AZURE_KEYVAULT_NAME }}
          AZURE_KEYVAULT_ENDPOINT: ${{ secrets.AZURE_KEYVAULT_ENDPOINT }}
        run: |
          set -Eeuo pipefail
          missing=()
          for var in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID AZURE_KEYVAULT_NAME; do
            if [[ -z "${!var:-}" ]]; then
              missing+=("$var")
            fi
          done
          if (( ${#missing[@]} )); then
            printf '‚ùå Repository Variables obrigat√≥rias ausentes: %s\n' "${missing[*]}"
            exit 1
          fi
          echo "‚úÖ Identificadores Azure configurados via vars"
          if [[ -z "${AZURE_KEYVAULT_ENDPOINT:-}" ]]; then
            echo '‚ÑπÔ∏è AZURE_KEYVAULT_ENDPOINT n√£o definido (usando endpoint padr√£o)'
          else
            echo '‚úÖ Endpoint customizado definido'
          fi

      - name: Ensure Python deps
        run: |
          set -Eeuo pipefail
          if ! command -v python3 >/dev/null 2>&1; then
            echo '‚ùå python3 n√£o est√° dispon√≠vel no runner self-hosted.' >&2
            exit 1
          fi
          python3 -c "import importlib.util, subprocess, sys; import importlib; spec = importlib.util.find_spec('yaml'); subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--user', 'PyYAML']) if spec is None else None"
          echo "‚úÖ Depend√™ncias Python dispon√≠veis"

      - name: Validate YAML files
        run: |
          set -Eeuo pipefail
          python3 -c "import pathlib, yaml; [yaml.safe_load(pathlib.Path(p).read_text(encoding='utf-8')) for p in ('docker-compose.yml',)]; print('‚úÖ YAML v√°lido: docker-compose.yml')"

      - name: Validate Docker Compose
        run: |
          set -Eeuo pipefail
          docker compose -f docker-compose.yml config -q
          echo "‚úÖ docker-compose.yml v√°lido"

      - name: Security scan (grep)
        run: |
          set -Eeuo pipefail
          if grep -R "password[[:space:]]*:[[:space:]]*['\"]" --include="*.yml" docker-compose.yml 2>/dev/null | grep -v '\${'; then
            echo "‚ö†Ô∏è Poss√≠vel credencial hardcoded detectada"
            exit 1
          fi
          echo "‚úÖ Nenhum segredo hardcoded identificado"

  deploy:
    needs: validate
    runs-on: [ self-hosted, Linux, X64, srv649924, conexao-de-sorte-zookeeper-infraestrutura ]
    timeout-minutes: 20
    permissions:
      contents: read
      id-token: write
    env:
      STACK_NAME: conexao-zookeeper
      DOCKER_NETWORK_NAME: conexao-network-swarm
      COMPOSE_FILE: docker-compose.yml
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 1
          clean: true

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Confirm Key Vault usage
        if: secrets.AZURE_KEYVAULT_NAME != ''
        run: |
          echo 'Deploy do Zookeeper n√£o consome segredos do Key Vault (lista vazia).'

      - name: Ensure Swarm resources
        run: |
          set -Eeuo pipefail
          for volume in zookeeper_data zookeeper_logs; do
            if ! docker volume ls | grep -q "${volume}$"; then
              echo "üìÅ Criando volume $volume"
              docker volume create "$volume"
            else
              echo "‚úÖ Volume $volume j√° existe"
            fi
          done
          for volume in zookeeper_data zookeeper_logs; do
            docker run --rm -v "${volume}:/var/lib/zookeeper" alpine:3.20 \
              sh -c 'chown -R 1000:1000 /var/lib/zookeeper' || true
          done
          if ! docker network ls | grep -q "$DOCKER_NETWORK_NAME"; then
            echo "üåê Criando rede $DOCKER_NETWORK_NAME"
            docker network create --driver overlay "$DOCKER_NETWORK_NAME"
          else
            echo "‚úÖ Rede $DOCKER_NETWORK_NAME j√° existe"
          fi

      - name: Deploy stack
        run: |
          set -Eeuo pipefail
          docker compose -f "$COMPOSE_FILE" config -q
          docker stack deploy -c "$COMPOSE_FILE" "$STACK_NAME"
          echo "‚è≥ Aguardando estabiliza√ß√£o..."
          sleep 30

      - name: Health check
        run: |
          set -Eeuo pipefail
          service="${STACK_NAME}_zookeeper"
          attempts=12
          for attempt in $(seq 1 "$attempts"); do
            echo "üîç Tentativa $attempt/$attempts"
            container=$(docker ps --filter "name=${service}" -q | head -n1)
            if [[ -n "$container" ]]; then
              if docker logs "$container" 2>/dev/null | grep -q "binding to port"; then
                echo "‚úÖ Logs indicam inicializa√ß√£o"
                exit 0
              fi
              if docker exec "$container" ss -tuln 2>/dev/null | grep -q ":2181 "; then
                echo "‚úÖ Porta 2181 ativa"
                exit 0
              fi
              if docker exec "$container" ps aux 2>/dev/null | grep -q "[q]uorumPeerMain"; then
                echo "‚úÖ Processo Zookeeper ativo"
                exit 0
              fi
            fi
            sleep 10
          done
          echo "‚ùå Health check falhou"
          docker service ps "$service" || true
          docker service logs "$service" --tail 50 || true
          exit 1

      - name: Post-deploy summary
        run: |
          set -Eeuo pipefail
          docker service ls | grep -E "(zookeeper|NAME)" || true
          echo "‚úÖ Deploy conclu√≠do"
