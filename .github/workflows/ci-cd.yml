name: "üß© Zookeeper Infrastructure ‚Äì CI/CD"

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Concurrency control para evitar execu√ß√µes simult√¢neas
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

jobs:
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      id-token: write
    env:
      COMPOSE_FILE: docker-compose.yml
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_PEER_PORT: 2888
      ZOOKEEPER_LEADER_PORT: 3888
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 1

      - name: Validate Azure identifiers (OIDC)
        env:
          AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          AZURE_KEYVAULT_NAME: ${{ vars.AZURE_KEYVAULT_NAME }}
          AZURE_KEYVAULT_ENDPOINT: ${{ vars.AZURE_KEYVAULT_ENDPOINT }}
        run: |
          set -Eeuo pipefail
          missing=()
          for var in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID; do
            if [[ -z "${!var:-}" ]]; then
              missing+=("$var")
            fi
          done
          if (( ${#missing[@]} )); then
            printf '‚ùå Repository Variables obrigat√≥rias ausentes: %s\n' "${missing[*]}"
            exit 1
          fi
          echo "‚úÖ Identificadores Azure OIDC configurados via vars"
          
          # Aplicar m√°scara para prote√ß√£o (mesmo que sejam apenas IDs)
          echo "::add-mask::${AZURE_CLIENT_ID}"
          echo "::add-mask::${AZURE_TENANT_ID}"
          echo "::add-mask::${AZURE_SUBSCRIPTION_ID}"
          
          if [[ -n "${AZURE_KEYVAULT_NAME:-}" ]]; then
            echo "‚ÑπÔ∏è Key Vault configurado: ${AZURE_KEYVAULT_NAME}"
            echo "::add-mask::${AZURE_KEYVAULT_NAME}"
          else
            echo '‚ÑπÔ∏è Key Vault n√£o configurado (Zookeeper n√£o requer segredos do Key Vault)'
          fi
          if [[ -n "${AZURE_KEYVAULT_ENDPOINT:-}" ]]; then
            echo "::add-mask::${AZURE_KEYVAULT_ENDPOINT}"
          fi

      - name: Ensure Python deps
        run: |
          set -Eeuo pipefail
          if ! command -v python3 >/dev/null 2>&1; then
            echo '‚ùå python3 n√£o est√° dispon√≠vel no runner self-hosted.' >&2
            exit 1
          fi
          python3 -c "import importlib.util, subprocess, sys; import importlib; spec = importlib.util.find_spec('yaml'); subprocess.check_call([sys.executable, '-m', 'pip', 'install', '--user', 'PyYAML']) if spec is None else None"
          echo "‚úÖ Depend√™ncias Python dispon√≠veis"

      - name: Validate YAML files
        run: |
          set -Eeuo pipefail
          python3 -c "import pathlib, yaml; [yaml.safe_load(pathlib.Path(p).read_text(encoding='utf-8')) for p in ('docker-compose.yml',)]; print('‚úÖ YAML v√°lido: docker-compose.yml')"

      - name: Validate Docker Compose
        run: |
          set -Eeuo pipefail
          docker compose -f docker-compose.yml config -q
          echo "‚úÖ docker-compose.yml v√°lido"
          
      - name: Validate Zookeeper Configuration
        run: |
          set -Eeuo pipefail
          # Verificar se as portas do Zookeeper est√£o configuradas
          if ! grep -q "2181:2181" docker-compose.yml; then
            echo "‚ùå Zookeeper client port (2181) n√£o configurada"
            exit 1
          fi
          
          # Verificar se h√° configura√ß√µes de ambiente Zookeeper
          if ! grep -q "ZOOKEEPER_" docker-compose.yml; then
            echo "‚ö†Ô∏è Configura√ß√µes ZOOKEEPER_ n√£o encontradas (pode ser normal para configura√ß√£o b√°sica)"
          else
            echo "‚úÖ Configura√ß√µes ZOOKEEPER_ encontradas"
          fi
          
          # Verificar se h√° volumes persistentes configurados
          if ! grep -q "zookeeper_data" docker-compose.yml; then
            echo "‚ö†Ô∏è Volume persistente zookeeper_data n√£o configurado"
          else
            echo "‚úÖ Volume persistente zookeeper_data configurado"
          fi
          
          echo "‚úÖ Configura√ß√£o Zookeeper validada"

      - name: Security scan (comprehensive)
        run: |
          set -Eeuo pipefail
          
          # Verificar passwords hardcoded
          if grep -R "password[[:space:]]*:[[:space:]]*['\"]" --include="*.yml" docker-compose.yml 2>/dev/null | grep -v '\${'; then
            echo "‚ö†Ô∏è Poss√≠vel credencial hardcoded detectada"
            exit 1
          fi
          
          # Verificar tokens e secrets
          if grep -E "(token|secret|key|password)[[:space:]]*:[[:space:]]*['\"][a-zA-Z0-9]{16,}" docker-compose.yml 2>/dev/null | grep -v '\${'; then
            echo "‚ö†Ô∏è Poss√≠vel token/secret hardcoded detectado"
            exit 1
          fi
          
          # Verificar vari√°veis de ambiente sens√≠veis n√£o mapeadas
          if grep -E "(AZURE_|AWS_|GCP_|DATABASE_)[A-Z_]*[[:space:]]*:" docker-compose.yml 2>/dev/null | grep -v '\${'; then
            echo "‚ö†Ô∏è Vari√°vel de ambiente sens√≠vel pode estar hardcoded"
            exit 1
          fi
          
          echo "‚úÖ Nenhum segredo hardcode identificado"

  deploy:
    needs: validate
    runs-on: [ self-hosted, Linux, X64, conexao, conexao-de-sorte-zookeeper-infraestrutura ]
    timeout-minutes: 25
    permissions:
      contents: read
      id-token: write
    env:
      STACK_NAME: conexao-zookeeper
      DOCKER_NETWORK_NAME: conexao-network-swarm
      COMPOSE_FILE: docker-compose.yml
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_PEER_PORT: 2888
      ZOOKEEPER_LEADER_PORT: 3888
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0
        with:
          fetch-depth: 1
          clean: true

      - name: Pre-deploy environment check
        run: |
          echo 'üîç Verificando ambiente antes do deploy...'
          echo "GitHub Actor: ${{ github.actor }}"
          echo "Repository: ${{ github.repository }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          echo "Ref: ${{ github.ref }}"
          
          # Verificar se h√° alguma vari√°vel de ambiente suspeita
          echo 'üîç Verificando vari√°veis de ambiente que podem conter segredos...'
          env | grep -i -E "(keyvault|secret|token|password)" || echo "Nenhuma vari√°vel suspeita encontrada"
          
          echo '‚úÖ Verifica√ß√£o de ambiente conclu√≠da'

      - name: Pre-deployment validation
        run: |
          set -Eeuo pipefail
          echo "üîç Validando ambiente antes do deploy..."
          
          # Verificar se Docker est√° rodando
          if ! docker info >/dev/null 2>&1; then
            echo "‚ùå Docker n√£o est√° rodando ou n√£o est√° acess√≠vel"
            exit 1
          fi
          echo "‚úÖ Docker est√° rodando"
          
          # Verificar modo Swarm
          if ! docker info 2>/dev/null | grep -q "Swarm: active"; then
            echo "‚ö†Ô∏è Docker Swarm n√£o est√° ativo (pode ser necess√°rio iniciar)"
          else
            echo "‚úÖ Docker Swarm est√° ativo"
          fi
          
          # Verificar espa√ßo em disco
          available_space=$(df -h . | awk 'NR==2 {print $4}' | sed 's/G//')
          if (( $(echo "$available_space < 2" | bc -l) )); then
            echo "‚ö†Ô∏è Espa√ßo em disco baixo: ${available_space}GB dispon√≠vel"
          else
            echo "‚úÖ Espa√ßo em disco suficiente: ${available_space}GB dispon√≠vel"
          fi
          
          # Verificar mem√≥ria dispon√≠vel
          available_mem=$(free -g | awk 'NR==2{printf "%.0f", $7}')
          if [[ $available_mem -lt 2 ]]; then
            echo "‚ö†Ô∏è Mem√≥ria dispon√≠vel baixa: ${available_mem}GB"
          else
            echo "‚úÖ Mem√≥ria dispon√≠vel: ${available_mem}GB"
          fi

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: Confirm Key Vault usage
        if: vars.AZURE_KEYVAULT_NAME != ''
        run: |
          echo '‚ÑπÔ∏è Key Vault configurado mas n√£o utilizado (Zookeeper n√£o requer segredos externos)'
          echo '‚úÖ Seguindo pol√≠tica de m√≠nimo necess√°rio - nenhum segredo do Key Vault √© requerido'
          echo 'üîí Nenhum segredo ser√° buscado do Key Vault neste deploy'

      - name: Explicit no-secrets declaration
        run: |
          echo '‚úÖ Declara√ß√£o expl√≠cita: Este deploy n√£o consome segredos do Azure Key Vault'
          echo '‚úÖ Zookeeper est√° sendo deployado com configura√ß√µes padr√£o e sem depend√™ncias externas'
          echo '‚úÖ Todas as configura√ß√µes necess√°rias est√£o no docker-compose.yml'

      - name: Debug - Verify no Key Vault secrets requested
        run: |
          echo 'üîç Verificando se nenhum comando est√° tentando buscar segredos do Key Vault...'
          echo '‚úÖ Este workflow n√£o cont√©m comandos az keyvault secret download/show'
          echo '‚úÖ Este workflow n√£o busca nenhum segredo espec√≠fico do Key Vault'
          echo '‚úÖ Configura√ß√£o seguindo pol√≠tica de m√≠nimo necess√°rio'

      - name: Ensure Swarm resources
        run: |
          set -Eeuo pipefail
          for volume in zookeeper_data zookeeper_logs; do
            if ! docker volume ls | grep -q "${volume}$"; then
              echo "üìÅ Criando volume $volume"
              docker volume create "$volume"
            else
              echo "‚úÖ Volume $volume j√° existe"
            fi
          done
          for volume in zookeeper_data zookeeper_logs; do
            docker run --rm -v "${volume}:/var/lib/zookeeper" alpine:3.20 \
              sh -c 'chown -R 1000:1000 /var/lib/zookeeper' || true
          done
          if ! docker network ls | grep -q "$DOCKER_NETWORK_NAME"; then
            echo "üåê Criando rede $DOCKER_NETWORK_NAME"
            docker network create --driver overlay "$DOCKER_NETWORK_NAME"
          else
            echo "‚úÖ Rede $DOCKER_NETWORK_NAME j√° existe"
          fi

      - name: Deploy stack
        run: |
          set -Eeuo pipefail
          docker compose -f "$COMPOSE_FILE" config -q
          docker stack deploy -c "$COMPOSE_FILE" "$STACK_NAME"
          echo "‚è≥ Aguardando estabiliza√ß√£o..."
          sleep 30

      - name: Health check
        run: |
          set -Eeuo pipefail
          service="${STACK_NAME}_zookeeper"
          attempts=18
          for attempt in $(seq 1 "$attempts"); do
            echo "üîç Tentativa $attempt/$attempts"
            container=$(docker ps --filter "name=${service}" -q | head -n1)
            if [[ -n "$container" ]]; then
              # Verificar logs de inicializa√ß√£o
              if docker logs "$container" 2>/dev/null | grep -q "binding to port"; then
                echo "‚úÖ Logs indicam inicializa√ß√£o"
              fi
              
              # Verificar se a porta 2181 est√° ativa
              if docker exec "$container" ss -tuln 2>/dev/null | grep -q ":2181 "; then
                echo "‚úÖ Porta 2181 ativa"
              fi
              
              # Verificar se o processo Zookeeper est√° rodando
              if docker exec "$container" ps aux 2>/dev/null | grep -q "[q]uorumPeerMain"; then
                echo "‚úÖ Processo Zookeeper ativo"
              fi
              
              # Testar conectividade real com zkCli
              if docker exec "$container" /opt/zookeeper/bin/zkCli.sh ls / 2>/dev/null | grep -q "zookeeper"; then
                echo "‚úÖ Zookeeper respondendo a comandos"
                exit 0
              fi
              
              # Teste alternativo com nc se zkCli n√£o estiver dispon√≠vel
              if docker exec "$container" nc -z localhost 2181 2>/dev/null; then
                echo "‚úÖ Conex√£o TCP na porta 2181 funcionando"
                exit 0
              fi
            fi
            sleep 10
          done
          echo "‚ùå Health check falhou ap√≥s $attempts tentativas"
          echo "üìã Status do servi√ßo:"
          docker service ps "$service" || true
          echo "üìã Logs do servi√ßo:"
          docker service logs "$service" --tail 100 || true
          echo "üìã Containers ativos:"
          docker ps -a | grep zookeeper || true
          exit 1

      - name: Post-deploy summary
        run: |
          set -Eeuo pipefail
          docker service ls | grep -E "(zookeeper|NAME)" || true
          echo "‚úÖ Deploy conclu√≠do"
