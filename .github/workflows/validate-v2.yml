name: "üß™ ZooKeeper V2 - Validation Only"

on:
  workflow_dispatch:

# Concurrency control
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write

env:
  COMPOSE_FILE_V2: docker-compose-emergency-v2.yml

jobs:
  validate-config:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v4.3.0

      - name: Validate Azure identifiers (OIDC)
        env:
          AZURE_CLIENT_ID: ${{ vars.AZURE_CLIENT_ID }}
          AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
        run: |
          set -Eeuo pipefail
          missing=()
          for var in AZURE_CLIENT_ID AZURE_TENANT_ID AZURE_SUBSCRIPTION_ID; do
            if [[ -z "${!var:-}" ]]; then
              missing+=("$var")
            fi
          done
          if (( ${#missing[@]} )); then
            printf '‚ùå Repository Variables obrigat√≥rias ausentes: %s\n' "${missing[*]}"
            exit 1
          fi
          echo "‚úÖ Identificadores Azure OIDC configurados via vars"
          
          # Aplicar m√°scara para prote√ß√£o (mesmo que sejam apenas IDs)
          echo "::add-mask::${AZURE_CLIENT_ID}"
          echo "::add-mask::${AZURE_TENANT_ID}"
          echo "::add-mask::${AZURE_SUBSCRIPTION_ID}"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ vars.AZURE_CLIENT_ID }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}

      - name: ‚úÖ Azure connectivity test
        run: |
          echo "üîó Testando conectividade Azure..."
          az account show --output table
          echo "‚úÖ Azure OIDC funcionando"

      - name: üîç Validate Docker Compose V2
        run: |
          echo "üìÅ Arquivos dispon√≠veis:"
          ls -la *.yml
          echo ""
          echo "üîç Validando $COMPOSE_FILE_V2..."
          if [[ -f "$COMPOSE_FILE_V2" ]]; then
            docker compose -f "$COMPOSE_FILE_V2" config -q
            echo "‚úÖ ZooKeeper V2 config v√°lida"
            
            # Verificar configura√ß√µes espec√≠ficas do Zookeeper V2
            if ! grep -q "2181:2181" "$COMPOSE_FILE_V2"; then
              echo "‚ö†Ô∏è Porta 2181 n√£o encontrada no arquivo V2"
            else
              echo "‚úÖ Porta 2181 configurada no V2"
            fi
            
            # Verificar se √© uma configura√ß√£o de emerg√™ncia
            if grep -q "emergency\|backup\|recovery" "$COMPOSE_FILE_V2"; then
              echo "‚úÖ Configura√ß√£o de emerg√™ncia detectada"
            else
              echo "‚ÑπÔ∏è Configura√ß√£o padr√£o detectada"
            fi
            
          else
            echo "‚ùå $COMPOSE_FILE_V2 n√£o encontrado"
            exit 1
          fi

      - name: üìã Report V2 Status
        run: |
          echo "üìä FASE 1 V2 - ZOOKEEPER VALIDATION"
          echo "=================================="
          echo "‚úÖ Azure OIDC: Funcionando"
          echo "‚úÖ Docker Compose V2: V√°lido"
          echo "‚úÖ Emergency Config: Dispon√≠vel"
          echo "‚úÖ Labels validados: conexao-de-sorte-zookeeper-infraestrutura"
          echo ""
          echo "üéØ PR√ìXIMO PASSO: Deploy no runner self-hosted"
          echo "‚ö†Ô∏è Requer runner com labels: [self-hosted, Linux, X64, conexao, conexao-de-sorte-zookeeper-infraestrutura]"
          echo "üí° Labels corrigidos: removido srv649924 (espec√≠fico de m√°quina)"